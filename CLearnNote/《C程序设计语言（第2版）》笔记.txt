1.\t 制表符，用于对齐\t后面的字符，通常是让前面占8个数字宽。
2.#define EOF (-1)  EOF为-1，同时EOF是一个字符。因为ascii字符对应的十进制大于0的（NULL等于0），所以-1可以表示不是任何一个字符，作为文件末尾符.
3.比较运算符大于赋值运算符
4.i=0；分别求：
	1.(i++) + (i++)	1
	2.(i++) + (++i)	2
	3.(++i) + (i++)	3
	4.(++i) + (++i)	4
5.vim下的替换命令 s
	:s/vivian/sky/ 替换当前行第一个 vivian 为 sky
　　:s/vivian/sky/g 替换当前行所有 vivian 为 sky
　　:n,$s/vivian/sky/ 替换第 n 行开始到最后一行中每一行的第一个 vivian 为 sky
　　:n,$s/vivian/sky/g 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky
　　n 为数字，若 n 为 .，表示从当前行开始到最后一行
6.printf 会影响到后面运行代码里的多行getchar函数，使其第一次读取正确字符，第二次读取换行符。
	其实和printf没关系，就算没有printf，实际上也是执行了两次getchar，因为总归要有个回车命令。有没有printf都一样。

7.%, /运算针对于负数时
	7%(-4) = 3  7/(-4) = -1
	(-7)%4 = -3  (-7)/4 = -1

8.位运算（补码运算）
 8.1 按位异或XOR  ^
 	a^b = (!a&b)|(a&!b)
 	a、b相同为0，a，b不同为1.
8.2 移位运算符
	<<左移 	>>右移
	左移时右补空格。
	右移时，目前操作系统都是左补符号位。（算术移位，即正数左补0，负数左补1）


8.3 二维数组，每一维（每一行）严格指向一个固定长度的地址。下一个地址紧跟下一维。即整个二维数组的地址是连贯的。
	指针数组，定义时未将数组中的每个指针进行赋值。在使用时对每个指针进行地址指向，此时指向的地址不一定是连贯的。可以任意对每个数组元素进行地址指向。

