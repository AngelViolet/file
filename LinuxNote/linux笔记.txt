LINUX命令对应全拼
https://blog.csdn.net/sinat_29742125/article/details/52818115

1.使用Vim比较两个文件的内容 	https://www.cnblogs.com/guochaoxxl/p/7015547.html
	1.1. 使用vim的比较模式打开两个文件：
	vim -d file1 file2
	或
	vimdiff file1 file2 
	1.2. 如果已经打开了文件file1，再打开另一个文件file2进行比较：
	:vert diffsplit file2
	如果没有用vert命令，diffsplit则会分上下两个窗口。 
	1.3. 如果已经用split方式打开了两个文件file1，file2，又想比较两文件的不同。
	分别在两个窗口里面输入命令：
	:diffthis 
	1.4. 如果更改了某个窗口的内容，vim又没有自动更新diff检查，可以使用如下命令更新：
	:diffupdate 
	1.5. 定位到不同点：
	[c     跳到前一个不同点
	]c     跳到后一个不同点 
	1.6. 在窗口间跳转：
	ctrl-w w    跳到下一个窗口
	ctrl-w h    跳到左侧窗口
	ctrl-w l    跳到右侧窗口
	ctrl-w j    跳到下方的窗口
	ctrl-w k    跳到上方的窗口 

	zf   创建折叠（使用数字表示创建有当前行到下多少行的折叠，比如3j就创建包括4行的折叠）
    zo   打开折叠(l也可以打开折叠）
    zc   关闭当前折叠
    zm   关闭所有折叠
    zr   打开所有折叠

2.切换用户时，相当于是用户的重新登录，需要加载新的环境变量（包括alias和环境变量）。作为之前shell之后创建的一个后继shell。
 	若果shell变量被export后，切换用户时，下一个用户会一直继承前一个shell的变量，所以被export的变量不会消失。

3.linux下printf函数为什么不加\n就不能输出相关的内容 ？https://blog.csdn.net/qq_26093511/article/details/53255970
	原因：  输出缓冲区的问题.
		unix上标准输入输出都是带有缓存的，一般是行缓存。	
		对于标准输出，需要输出的数据并不是直接输出到终端上，而是首先缓存到某个地方，当遇到行刷新标志或者该缓存已满的情况下，才会把缓存的数据显示到终端设备上。
	ANSI C中定义换行符'\n'可以认为是行刷新标志。所以，printf函数没有带'\n'是不会自动刷新输出流，直至缓存被填满。解决方案：
	方案1、在printf里加"\n"
	方案2、fflush(stdout)刷新标准输出缓冲区，把输出缓冲区里的东西打印到标准输出设备上 。

  	fflush(stdout); //  刷新一下缓冲区 让它马上输出.  在printf 之后调用它,就会马上输出了.  
  	setvbuf(stdout,NULL,_IONBF,0); //如果你嫌上个方法麻烦, 就使用这个函数. 直接将缓冲区禁止了. 它就直接输出了。

 4.解决ubuntu下sudo很慢的原因。
 	原因：Ubuntu Server被设计成一种类似于分布式的操作系统网结构，允许/etc/sudoers中的成员不在本机上。从而sudo时会先从网络上寻找可能的sudoer然后才是本地. 而这10s左右的时间就是整个DNS流程的最长时间.
	解决方案：首先输入hostname，得到本机当前的互联网名称（大概跟windows下的计算机名称差不多）。然后使用su或sudo打开/etc/hosts，添加一行：
	127.0.0.1<TAB>计算机名<TAB>计算机名.localdomain

5. linux命令提示符
	[root@localhost ~]#
 
    root代表当前登录的用户，在Linux中管理员账户是root
    localhost当前计算机主机名
    ~当前所在家目录，/当前所在根目录
    #超级用户提示符，普通用户的提示符是$

6.一般无法通过xshell直接连接root，因为vim /etc/ssh/sshd_config配置文件里的保护设置，需要更改。

7.linux系统启动流程 https://www.cnblogs.com/kevingrace/p/6244584.html
	7.1 加载内核
		首先读入/boot 下的内核文件。
	7.2 启动初始化进程
		/sbin/init 是祖进程。初始化系统，并生产其他进程。 pid为1.
	7.3 确定运行级别 一般都是3级，id:3:initdefault
	7.4 加载开机启动程序
		Linux将七个 /etc/rcN.d 目录（对应7级运行等级，N=0~6）里列出的程序，都设为链接文件，指向另外一个目录 /etc/init.d ，真正的启动脚本都统一放在这个目录中。init进程逐一加载开机启动程序，其实就是运行这个目录里的启动脚本。
	7.5 用户登录
		开机启动程序加载完毕后，用户进行登录：1.命令行登录。2.ssh登录。3.图形界面登录。
		7.5.1 命令行登录
			init进程调用getty程序（get teletype），让用户输入账号密码，再调用login程序，核对密码。若正确，调用/etc/passwd来指定用户登录的shell，并启动此shell。
		7.5.2 ssh登录
			此时系统会调用ssh(secure shell)，取代getty和login，然后启动shell。
	7.6 进入login shell
		所谓shell，简单的说就是命令行界面，用与翻译用户和内核的工具，是命令解析器。用户登录时打开的shell，就叫做login shell
		Linux默认的shell是bash，它会读取一系列的配置文件。根据登录方式的不同，bash读取配置文件也不同。
		7.6.1 命令行登录
			


8.文件描述符（fd）
	8.1对于内核而言，所有打开的文件都是通过文件描述符引用的。
	8.2一般最大打开文件数会是系统内存的10%（以KB来计算）（称之为系统级限制），查看系统级别的最大打开文件数可以使用sysctl -a | grep fs.file-max命令查看。与此同时，内核为了不让某一个进程消耗掉所有的文件资源，其也会对单个进程最大打开文件数做默认值处理（称之为用户级限制），默认值一般是1024，使用ulimit -n命令可以查看



9. Ubuntu使用ifconfig察看只有lo，并且也连不上网 --已解决
	sudo service network-manager stop
	sudo rm /var/lib/NetworkManager/NetworkManager.state
	sudo service network-manager start



10.正则表达式
	https://www.cnblogs.com/zengguowang/p/7779699.html 三种括号
		大括号{}：匹配次数，匹配在它之前表达式匹配出来的元素出现的次数，{n}出现n次、{n,}匹配最少出现n次、{n,m}匹配最少出现n次，最多出现m次、
		如：^.{1,64}$  单个字符匹配至少一次，至多64次


11.su user  会不会加载环境变量	http://www.ha97.com/4001.html
	su user 不会加载环境变量
	su - user 会加载环境变量

	su命令和su -命令最大的本质区别就是：前者只是切换了root身份，但Shell环境仍然是普通用户的Shell；而后者连用户和Shell环境一起切换成root身份了。只有切换了Shell环境才不会出现PATH环境变量错误。su切换成root用户以后，pwd一下，发现工作目录仍然是普通用户的工作目录；而用su -命令切换以后，工作目录变成root的工作目录了。用echo $PATH命令看一下su和su -以后的环境变量有何不同。以此类推，要从当前用户切换到其它用户也一样，应该使用su -命令。
	
12.查看进程启动路径。
	1.先查看进程的进程号PID  ps -ef | grep PROCENAME
	2.cd /proc/Pid
	3.ls -l  会看到cwd和exe。就是路径所在啦。

	或者获取到进程号后，直接lsof -p PID,展示很多进程占用文件信息，包括执行文件所在路径，更快捷

13.如何输出文本中想要的单词。“如所有TBL_开头的单词（单词前后有空格，回车等空字符），用于查询有哪些表名”
	1.直接命令行执行：
		cat qls.txt | sed 's/TBL_/TBL_ /g' | awk '{a="";for(i=1;i<=NF;i++){if($i=="TBL_")a=a" "$(i+1)}print a}' | sed 's/ /\n/g' | grep -v ^$ | awk '{print "TBL_"$1}'
	2.vim文件，将所有空格转成换行符	https://blog.csdn.net/ermuzhi/article/details/8808953
		:%s/ +/\r/g 
		%s在整个文件里替换，
		/分隔符，空格+其中“ ”表示空格，+表示重复1次或多次，加在一起表示一个或多个空格。
			但是有时测试发现+无效，就去除+再执行。
		\r:换行符。g：全局搜索	 不可以用\n会出现乱码。
		然后直接grep TBL_
	3.直接命令执行： 
		cat sql.txt | sed 's/ /\n/g' | grep "TBL_" | sort | uniq 
		命令行就是要用\n。vim时要用\r

14.关于堆栈的大小设置对于数组空间申请的限制
https://blog.csdn.net/qq_21882325/article/details/65445810
	ulimit -a 可以查看到数据区（DATA SEGMENT）和栈区（stack）的大小配置
	如果是局部变量的话和函数的话，是存储在stack里，此时Ubuntu中设置的为8192kb
	也就是8388608bytes，int数组的话只能存的下2097152 即200万大小的int数组。超出就会段错误

	ulimit -s 可以修改栈stack的大小

15.ulimit -a 中的blocks，是多大，如何查看。
	为何core文件生成的大小可以大于设置值
	为何增大core设置值时，同样的源程序，产生的core文件会变大。


16. 查看glibc的版本  glibc各版本安装包http://ftp.gnu.org/gnu/glibc/
	getconf GNU_LIBC_VERSION 
	ldd --version
	strings /lib64/libc.so.6 | grep GLIBC
	
	测试版本打出来后，启动时出现libc.so.6: version `GLIBC_2.14' not found 由于glibc版本问题引起的。
	glibc GNN LIB C 是GUN发布的lib库，即C运行库。是linux最底层的api。

	glibc_2.12升级到glibc_2.14 操作步骤 https://www.cnblogs.com/barneywill/p/10315636.html


17 https://blog.csdn.net/t146lla128xx0x/article/details/81267496
	libc和glibc的关系。


18.大小端与字节序
	大端模式：数据的高字节保存在低地址，低字节数据保存在高地址。
	网络字节序为大端模式。UDP/TCP/IP协议规定:把接收到的第一个字节当作高位字节看待。

	小端模式：与上相反	
	redhat里一般是小段模式.如i=1024;memcpy(sz,i,2);sz[0]=255,sz[1]=3;sz[]地址值向右递增。

19.局部函数得return 之所以可以返回局部变量。是因为系统会把局部变量的数据存在eax寄存器中，然后再从寄存器中取出来赋值给调用者

20.https://blog.csdn.net/fdgyfghh/article/details/86565718
	一个进程在内存中的存储如下：
			-----------------------------------------
			|    				  					|	函数内部使用的变量、函数的
			|			栈区  (stack)（auto）		|	参数以及返回值将使用栈空间，
			|			（向下增长）					|	栈空间由编译器自动分配和释放。	
			-----------------------------------------
			|	 		 	 ·						|	
			|	 	 		 ·						|
			| 堆栈增长区（即未分配的内存区，供堆栈使用）|
			|  	 			 ·						|
			|  	 			 ·						|
	^		-----------------------------------------
向	|		|			 堆区 (heap)	（向上增长）		|	系统可能在程序结束后回收内存(若未手动释放)
方	|		-----------------------------------------
增	|		|			其他段						|	包含其他多个段。
递	|		-----------------------------------------
址	|		|   		未初始化数据段(.bss段)		|	变量在程序运行之前不需要占用存储器的空间。
地	|		-----------------------------------------
拟	|		|			只读数据段 (RO data)			|   const局部变量，const全局变量，常量"123"
虚	|		|		  /								|
			|  .data段 								|
			|		  \								|
			|		  	已初始化读写数据段（RW data）	|	保存进程所有的已初始化的全局变量
			-----------------------------------------	
			|  			代码段(.text段)			    |	保存进程所依赖的二进制文件
			-----------------------------------------

21.linux虚拟内存空间 https://blog.csdn.net/qq_38410730/article/details/81104079
	1.物理地址是页表的形式，虚拟地址是连续的内存空间。系统会对两者进行映射。


22.linux进程简介及其五种状态 https://blog.csdn.net/qq_38410730/article/details/81173170
	进程：由操作系统定义，并由操作系统所操控的一个特殊的数据结构实例叫做进程。它连接了用户代码，拥有代码运行所需的独立内存空间，在调度器的调度下使用分配给它的处理器时间片来运行。而所谓的时间片轮转，就是对task_struct创建的每一个进程块（为双向链表）进行循环调用（调用模式类似于摇头风扇）。
		1.是应用程序可执行代码在系统中运行的过程。
		2.进程控制块(task_struct)：用来表示系统中进程的身份和存在。
		3.进程的都用户自己的用户空间，彼此无法访问，所以进程间通信需要通过内核。


23.linux进程的基本工作模式。

24.用户态和内核态
	进程在执行自己的代码时，处于用户态。当执行到系统调用的代码时，处于内核态。




